{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useFetch from './useFetch';\nexport const useWordle = () => {\n  _s();\n  const [guesses, setGuesses] = useState(Array.from({\n    length: 6\n  }, () => Array(5).fill('')));\n  const [currentGuesses, setCurrentGuesses] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [messsage, setMessage] = useState(false);\n  const {\n    isLoading,\n    data\n  } = useFetch();\n  const [word, setWord] = useState('');\n  useEffect(() => {\n    if (data.length > 0) {\n      initializeGame();\n    }\n  }, [data]);\n  const initializeGame = () => {\n    if (data.length > 0) {\n      const randomIndex = Math.floor(Math.random() * data.length);\n      const randomWord = data[randomIndex];\n      console.log('Случайно выбранное слово:', randomWord);\n      setWord(randomWord);\n      setGuesses(Array.from({\n        length: 6\n      }, () => Array(5).fill('')));\n      setCurrentGuesses('');\n      setCurrentIndex(0);\n      setGameOver(false);\n      setMessage(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (gameOver) return;\n    if (e.key === 'Enter' && currentGuesses.length === 5) {\n      if (currentGuesses === word) {\n        alert(`Вы угадали слово ${word}`);\n        setGameOver(true);\n        setMessage(false);\n      } else {\n        if (currentIndex < 5) {\n          setCurrentIndex(currentIndex + 1);\n          setCurrentGuesses('');\n        } else {\n          alert(`Вы проиграли. Правильное слово: ${word}`);\n          setGameOver(true);\n          setMessage(true);\n        }\n      }\n    } else if (e.key === 'Backspace') {\n      setCurrentGuesses(currentGuesses.slice(0, -1));\n    } else if (/^[a-zA-Z]$/.test(e.key) && currentGuesses.length < 5) {\n      setCurrentGuesses(currentGuesses + e.key.toUpperCase());\n    }\n  };\n  useEffect(() => {\n    const handleKeyDown = e => handleKeyPress(e);\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [currentGuesses, currentIndex, gameOver]);\n  useEffect(() => {\n    const newGuesses = [...guesses];\n    newGuesses[currentIndex] = currentGuesses.split('');\n    setGuesses(newGuesses);\n  }, [currentGuesses, currentIndex]);\n  const getTileClass = (letter, col, row) => {\n    if (gameOver && guesses[row].join('') === word) {\n      return 'correct';\n    }\n    if (word[col] === letter) {\n      return 'correct';\n    }\n    if (word.includes(letter) && letter == '') {\n      return 'white';\n    }\n    if (word.includes(letter) && letter) {\n      return 'present';\n    }\n    return 'incorrect';\n  };\n  return {\n    word,\n    isLoading,\n    guesses,\n    gameOver,\n    currentGuesses,\n    currentIndex,\n    getTileClass,\n    initializeGame,\n    messsage\n  };\n};\n_s(useWordle, \"bzIEMuHcH9/8AbjEuxInRSqTPVw=\", false, function () {\n  return [useFetch];\n});","map":{"version":3,"names":["useState","useEffect","useFetch","useWordle","_s","guesses","setGuesses","Array","from","length","fill","currentGuesses","setCurrentGuesses","currentIndex","setCurrentIndex","gameOver","setGameOver","messsage","setMessage","isLoading","data","word","setWord","initializeGame","randomIndex","Math","floor","random","randomWord","console","log","handleKeyPress","e","key","alert","slice","test","toUpperCase","handleKeyDown","document","addEventListener","removeEventListener","newGuesses","split","getTileClass","letter","col","row","join","includes"],"sources":["/home/user/elzar games/wordle-games/src/hooks/useWordle.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport useFetch from './useFetch'\n\nexport const useWordle = () => {\n\tconst [guesses, setGuesses] = useState<string[][]>(\n\t\tArray.from({ length: 6 }, () => Array(5).fill(''))\n\t)\n\tconst [currentGuesses, setCurrentGuesses] = useState<string>('')\n\tconst [currentIndex, setCurrentIndex] = useState<number>(0)\n\tconst [gameOver, setGameOver] = useState<boolean>(false)\n\tconst [messsage, setMessage] = useState<boolean>(false)\n\tconst { isLoading, data } = useFetch()\n\tconst [word, setWord] = useState<string>('')\n\n\tuseEffect(() => {\n\t\tif (data.length > 0) {\n\t\t\tinitializeGame()\n\t\t}\n\t}, [data])\n\n\tconst initializeGame = () => {\n\t\tif (data.length > 0) {\n\t\t\tconst randomIndex = Math.floor(Math.random() * data.length)\n\t\t\tconst randomWord = data[randomIndex]\n\t\t\tconsole.log('Случайно выбранное слово:', randomWord)\n\t\t\tsetWord(randomWord)\n\t\t\tsetGuesses(Array.from({ length: 6 }, () => Array(5).fill('')))\n\t\t\tsetCurrentGuesses('')\n\t\t\tsetCurrentIndex(0)\n\t\t\tsetGameOver(false)\n\t\t\tsetMessage(false)\n\t\t}\n\t}\n\n\tconst handleKeyPress = (e: KeyboardEvent) => {\n\t\tif (gameOver) return\n\n\t\tif (e.key === 'Enter' && currentGuesses.length === 5) {\n\t\t\tif (currentGuesses === word) {\n\t\t\t\talert(`Вы угадали слово ${word}`)\n\t\t\t\tsetGameOver(true)\n\t\t\t\tsetMessage(false)\n\t\t\t} else {\n\t\t\t\tif (currentIndex < 5) {\n\t\t\t\t\tsetCurrentIndex(currentIndex + 1)\n\t\t\t\t\tsetCurrentGuesses('')\n\t\t\t\t} else {\n\t\t\t\t\talert(`Вы проиграли. Правильное слово: ${word}`)\n\t\t\t\t\tsetGameOver(true)\n\t\t\t\t\tsetMessage(true)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (e.key === 'Backspace') {\n\t\t\tsetCurrentGuesses(currentGuesses.slice(0, -1))\n\t\t} else if (/^[a-zA-Z]$/.test(e.key) && currentGuesses.length < 5) {\n\t\t\tsetCurrentGuesses(currentGuesses + e.key.toUpperCase())\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => handleKeyPress(e)\n\t\tdocument.addEventListener('keydown', handleKeyDown)\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handleKeyDown)\n\t\t}\n\t}, [currentGuesses, currentIndex, gameOver])\n\n\tuseEffect(() => {\n\t\tconst newGuesses = [...guesses]\n\t\tnewGuesses[currentIndex] = currentGuesses.split('')\n\t\tsetGuesses(newGuesses)\n\t}, [currentGuesses, currentIndex])\n\n\tconst getTileClass = (letter: string, col: number, row: number) => {\n\t\tif (gameOver && guesses[row].join('') === word) {\n\t\t\treturn 'correct'\n\t\t}\n\t\tif (word[col] === letter) {\n\t\t\treturn 'correct'\n\t\t}\n\t\tif (word.includes(letter) && letter == '') {\n\t\t\treturn 'white'\n\t\t}\n\t\tif (word.includes(letter) && letter) {\n\t\t\treturn 'present'\n\t\t}\n\t\treturn 'incorrect'\n\t}\n\n\treturn {\n\t\tword,\n\t\tisLoading,\n\t\tguesses,\n\t\tgameOver,\n\t\tcurrentGuesses,\n\t\tcurrentIndex,\n\t\tgetTileClass,\n\t\tinitializeGame,\n\t\tmesssage\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}